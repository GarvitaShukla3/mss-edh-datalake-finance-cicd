name: Sync Repo to Microsoft Fabric Workspace

on:
  push:
    branches:
      - main
    paths:
      - deploy/notebook/**/*.ipynb

env:
  TENANT_ID: ${{ secrets.FABRIC_TENANT_ID }}
  CLIENT_ID: ${{ secrets.FABRIC_ID }}
  CLIENT_SECRET: ${{ secrets.FABRIC_SECRET_TOKEN }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Get OAuth2 token
        id: auth
        run: |
          echo "Getting token..."
          TOKEN=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=${{ env.CLIENT_ID }}&client_secret=${{ env.CLIENT_SECRET }}&scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token" | jq -r '.access_token')
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Sync notebooks to Microsoft Fabric workspace
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
        run: |
          set -e
          set -x

          FABRIC_API="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          for FILE in $(git ls-files deploy/notebook/**/*.ipynb); do
            echo "Processing $FILE"

            # derive a displayName and internal artifactId / path
            DISPLAY_NAME=$(basename "$FILE" .ipynb)  # e.g. Notebook1 if file is Notebook1.ipynb
            # option: maybe you want to namespace or keep subfolders, adapt accordingly

            # read file content and base64 encode
            CONTENT_BASE64=$(base64 "$FILE" | tr -d '\n')

            # Build body for create / update using the "definition" structure
            BODY=$(jq -n --arg dn "$DISPLAY_NAME" --arg cnt "$CONTENT_BASE64" \
              '{
                 displayName: $dn,
                 type: "Notebook",
                 definition: {
                   format: "ipynb",
                   parts: [
                     {
                       path: "\($dn).ipynb",
                       payload: $cnt,
                       payloadType: "InlineBase64"
                     }
                   ]
                 }
               }')

            # Check if notebook with this displayName exists (list items)
            LIST_RESPONSE=$(curl -s -X GET -H "Authorization: Bearer $TOKEN" \
              "$FABRIC_API?filter=displayName eq '$DISPLAY_NAME'")

            # parse artifactId if exists
            ARTIFACT_ID=$(echo "$LIST_RESPONSE" | jq -r '.value[] | select(.displayName=="'"$DISPLAY_NAME"'") | .id')

            if [ -n "$ARTIFACT_ID" ] && [ "$ARTIFACT_ID" != "null" ]; then
              echo "Notebook exists. Updating definition for artifactId $ARTIFACT_ID"
              UPDATE_URL="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items/${ARTIFACT_ID}/definition"
              RESP=$(curl -s -w "\n%{http_code}" -X PATCH \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$BODY" "$UPDATE_URL")
            else
              echo "Notebook doesn’t exist. Creating new one: $DISPLAY_NAME"
              RESP=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$BODY" "$FABRIC_API")
            fi

            HTTP_CODE=$(echo "$RESP" | tail -n1)
            BODY_RESP=$(echo "$RESP" | sed '$d')
            echo "Response code: $HTTP_CODE"
            echo "Response body: $BODY_RESP"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "✅ $FILE synced successfully"
            else
              echo "❌ Failed syncing $FILE"
            fi

          done
