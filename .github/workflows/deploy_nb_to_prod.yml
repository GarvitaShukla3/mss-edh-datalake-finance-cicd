name: Deploy notebook garvita

on:
  push:
    branches:
      - main
    paths:
      - deploy/notebook/**/*.ipynb

jobs:
  deploy_notebooks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set up environment variables
        run: |
          echo "AZURE_ACCESS_TOKEN=${{ secrets.FABRIC_ACCESS_TOKEN }}" >> $GITHUB_ENV
          echo "FABRIC_WORKSPACE_ID=${{ secrets.FABRIC_WORKSPACE_ID }}" >> $GITHUB_ENV

      - name: Get changed .ipynb files
        id: changed-files
        uses: tj-actions/changed-files@v33
        with:
          files: |
            deploy/notebook/**/*.ipynb

      - name: Deploy changed notebooks to Microsoft Fabric
        if: steps.changed-files.outputs.all_changed_files != ''
        run: |
          echo "Changed notebooks: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "üìò Processing: $file"

            # Extract notebook name without extension
            filename=$(basename "$file")
            notebook_name="${filename%.ipynb}"

            echo "üßæ Notebook name: $notebook_name"

            # Encode notebook in base64 (no line wrapping)
            base64_content=$(base64 -w 0 "$file")

            # Create the final payload using the template
            jq --arg name "$notebook_name" \
               --arg payload "$base64_content" \
               '.displayName = $name | .definition.parts[0].payload = $payload' \
               deploy/template.json > deploy/final.json

            echo "üöÄ Deploying $filename to Microsoft Fabric..."

            response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" --location \
              --header "Authorization: Bearer $FABRIC_ACCESS_TOKEN" \
              --header "Content-Type: application/json" \
              --data "@deploy/final.json" \
              "https://api.fabric.microsoft.com/groups/$FABRIC_WORKSPACE_ID/items")

  


            # Split response and HTTP status
            http_body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
            http_status=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "$http_status" -ne 200 ] && [ "$http_status" -ne 201 ]; then
              echo "‚ùå Failed to deploy $filename"
              echo "HTTP Status: $http_status"
              echo "Response:"
              echo "$http_body"
              exit 1
            else
              echo "‚úÖ Successfully deployed: $filename"
            fi
          done
