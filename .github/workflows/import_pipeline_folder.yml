name: Import Fabric Pipelines (ARM → CLI)

on:
  workflow_dispatch:
  push:
    paths:
      - 'deploy/pipeline/**'

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  FABRIC_WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  import-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Fabric CLI
        run: pip install ms-fabric-cli

      - name: Login to Fabric CLI
        run: |
          fab config set encryption_fallback_enabled true
          fab auth login -u $CLIENT_ID -p $CLIENT_SECRET --tenant $TENANT_ID
          # optional: list workspace contents
          fab ls /Prod-Fabric-workspace.Workspace || true
          fab ls /Prod-Fabric-workspace.Workspace | grep abc_pipeline_testing


      - name: Convert ARM JSON & import pipelines
        run: |
          # Loop through pipeline folders
          for pipeline_dir in deploy/pipeline/*; do
            if [ -d "$pipeline_dir" ]; then
              pipeline_name=$(basename "$pipeline_dir")
              echo "=== Pipeline folder: $pipeline_name ==="
              
              arm_json="$pipeline_dir/${pipeline_name}.json"
              fabric_json="$pipeline_dir/${pipeline_name}_fabric.json"
              manifest_file="$pipeline_dir/manifest.json"

              # Convert ARM JSON to Fabric-compatible pipeline JSON
              if [ -f "$arm_json" ]; then
                echo "Converting $arm_json → $fabric_json"
                jq '.resources[0]' "$arm_json" > "$fabric_json"
              else
                echo "⚠️ ARM JSON file not found: $arm_json"
                continue
              fi

              # Generate manifest.json for CLI import
              echo "Writing manifest.json"
              cat > "$manifest_file" <<EOF
              {
                "name": "$pipeline_name",
                "type": "Pipeline",
                "displayName": "$pipeline_name",
                "definition": {
                 "path": "$(basename "$fabric_json")"
              }
            }
          EOF

              echo "Contents of $pipeline_dir:"
              ls -l "$pipeline_dir"

              # Perform the import via Fabric CLI
              echo "Importing pipeline: $pipeline_name"
              fab import Prod-Fabric-workspace.Workspace/${pipeline_name}.DataPipeline --input "$pipeline_dir" -f || {
                echo "❌ Import failed for $pipeline_name"
                exit 1
              }
              echo "✅ Imported $pipeline_name"
              echo "-----------------------------"
            fi
          done
