name: Insert Pipelines If Not Exist (Direct JSON Upload)

on:
  workflow_dispatch:
  push:
    paths:
      - 'deploy/pipeline/**/*.json'
      - 'deploy/pipeline/**/manifest.json'

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  insert-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Microsoft Fabric Access Token
        id: get_token
        run: |
          set -euo pipefail

          echo "üîê Requesting access token..."
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
            echo "‚ùå Failed to retrieve access token. Response:"
            echo "$RESPONSE"
            exit 1
          fi

          echo "‚úÖ Access token retrieved."
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Insert pipelines if not exist
        env:
          TOKEN: ${{ env.ACCESS_TOKEN }}
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
        run: |
          set -euo pipefail

          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          echo "üîé Finding pipeline folders..."
          PIPELINE_FOLDERS=$(find deploy/pipeline -mindepth 1 -maxdepth 1 -type d || true)

          if [ -z "$PIPELINE_FOLDERS" ]; then
            echo "‚ö†Ô∏è No pipeline folders found. Nothing to do."
            exit 0
          fi

          for PIPELINE_FOLDER in $PIPELINE_FOLDERS; do
            PIPELINE_NAME=$(basename "$PIPELINE_FOLDER")

            MANIFEST_FILE="$PIPELINE_FOLDER/manifest.json"
            PIPELINE_JSON_FILE="$PIPELINE_FOLDER/${PIPELINE_NAME}.json"

            echo "üì¶ Processing pipeline: $PIPELINE_NAME"

            # Check manifest.json presence (for your own validation)
            if [ ! -f "$MANIFEST_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - manifest.json not found"
              continue
            fi

            # Check pipeline JSON file presence
            if [ ! -f "$PIPELINE_JSON_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - ${PIPELINE_NAME}.json not found"
              continue
            fi

            echo "üîé Checking if pipeline $PIPELINE_NAME already exists..."
            EXISTING_ITEM_ID=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
              jq -r --arg dn "$PIPELINE_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n 1)

            if [ -n "$EXISTING_ITEM_ID" ]; then
              echo "‚ÑπÔ∏è Pipeline $PIPELINE_NAME already exists (ID: $EXISTING_ITEM_ID). Skipping creation."
              continue
            fi

            echo "üìÑ Reading pipeline JSON content..."
            PIPELINE_DEFINITION=$(cat "$PIPELINE_JSON_FILE") || {
              echo "‚ùå Failed to read pipeline JSON: $PIPELINE_JSON_FILE"
              exit 1
            }

            echo "üß© Building payload for pipeline creation..."

            FULL_PAYLOAD=$(jq -n \
              --arg dn "$PIPELINE_NAME" \
              --argjson def "$(echo "$PIPELINE_DEFINITION" | jq '.')" \
              '{
                displayName: $dn,
                type: "Pipeline",
                createItemRequest: {
                  definition: $def
                }
              }') || {
                echo "‚ùå Failed to build JSON payload for $PIPELINE_NAME"
                exit 1
              }

            echo "üÜï Creating new pipeline $PIPELINE_NAME..."
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data "$FULL_PAYLOAD" \
              "$API_BASE") || {
                echo "‚ùå API request to create pipeline $PIPELINE_NAME failed"
                exit 1
              }

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY_RESP=$(echo "$RESPONSE" | sed '$d')

            echo "Response code: $HTTP_CODE"
            echo "Response body: $BODY_RESP"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "‚úÖ Successfully created pipeline: $PIPELINE_NAME"
            else
              echo "‚ùå Failed to create pipeline: $PIPELINE_NAME"
              exit 1
            fi
          done
