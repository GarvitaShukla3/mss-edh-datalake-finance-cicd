name: Import Pipelines

on:
  workflow_dispatch:
  push:
    paths:
      - 'deploy/pipeline/**/*.json'

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  import-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Microsoft Fabric Access Token
        id: get_token
        run: |
          set -euo pipefail

          echo "üîê Requesting access token..."
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token") || {
              echo "‚ùå Failed to call token endpoint"
              exit 1
          }

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
            echo "‚ùå Failed to retrieve access token. Response:"
            echo "$RESPONSE"
            exit 1
          fi

          echo "‚úÖ Access token retrieved."
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Import pipelines from JSON folders
        env:
          TOKEN: ${{ env.ACCESS_TOKEN }}
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
        run: |
          set -euo pipefail

          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          echo "üîé Finding pipeline folders..."
          PIPELINE_FOLDERS=$(find deploy/pipeline -mindepth 1 -maxdepth 1 -type d || true)

          if [ -z "$PIPELINE_FOLDERS" ]; then
            echo "‚ö†Ô∏è No pipeline folders found. Nothing to do."
            exit 0
          fi

          for PIPELINE_FOLDER in $PIPELINE_FOLDERS; do
            PIPELINE_NAME=$(basename "$PIPELINE_FOLDER")

            PIPELINE_JSON_FILE="$PIPELINE_FOLDER/${PIPELINE_NAME}.json"
            MANIFEST_FILE="$PIPELINE_FOLDER/manifest.json"

            echo "üì¶ Processing pipeline: $PIPELINE_NAME"

            if [ ! -f "$PIPELINE_JSON_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - ${PIPELINE_NAME}.json not found"
              continue
            fi

            if [ ! -f "$MANIFEST_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - manifest.json not found"
              continue
            fi

            # Base64 encode full pipeline JSON file content
            echo "üîÑ Encoding pipeline JSON file..."
            PIPELINE_JSON_BASE64=$(base64 -w 0 "$PIPELINE_JSON_FILE") || {
              echo "‚ùå Failed to base64 encode $PIPELINE_JSON_FILE"
              exit 1
            }

            # Build full payload with definition as base64 encoded JSON
            FULL_PAYLOAD=$(jq -n \
              --arg dn "$PIPELINE_NAME" \
              --arg fn "${PIPELINE_NAME}.json" \
              --arg payload "$PIPELINE_JSON_BASE64" \
              '{
                displayName: $dn,
                type: "Pipeline",
                definition: {
                  format: "json",
                  parts: [
                    {
                      path: $fn,
                      payload: $payload,
                      payloadType: "InlineBase64"
                    }
                  ]
                }
              }') || {
                echo "‚ùå Failed to build JSON payload for $PIPELINE_NAME"
                exit 1
              }

            echo "üß™ Payload to API:"
            echo "$FULL_PAYLOAD" | jq . || true

            echo "üîé Checking if pipeline exists..."
            EXISTING_ITEM_ID=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" || {
              echo "‚ùå Failed to get existing pipelines list"
              exit 1
            } | jq -r --arg dn "$PIPELINE_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n 1) || {
              echo "‚ùå Failed to parse existing pipeline IDs"
              exit 1
            }

            if [ -n "$EXISTING_ITEM_ID" ]; then
              echo "üîÑ Updating existing pipeline $PIPELINE_NAME (ID: $EXISTING_ITEM_ID)..."

              UPDATE_PAYLOAD=$(jq -n \
                --arg fn "${PIPELINE_NAME}.json" \
                --arg payload "$PIPELINE_JSON_BASE64" \
                '{
                  definition: {
                    format: "json",
                    parts: [
                      {
                        path: $fn,
                        payload: $payload,
                        payloadType: "InlineBase64"
                      }
                    ]
                  }
                }') || {
                  echo "‚ùå Failed to build update payload for $PIPELINE_NAME"
                  exit 1
                }

              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$UPDATE_PAYLOAD" \
                "$API_BASE/$EXISTING_ITEM_ID/updateDefinition") || {
                  echo "‚ùå API request to update pipeline $PIPELINE_NAME failed"
                  exit 1
                }
            else
              echo "üÜï Creating new pipeline $PIPELINE_NAME..."

              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$FULL_PAYLOAD" \
                "$API_BASE") || {
                  echo "‚ùå API request to create pipeline $PIPELINE_NAME failed"
                  exit 1
                }
            fi

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY_RESP=$(echo "$RESPONSE" | sed '$d')

            echo "Response code: $HTTP_CODE"
            echo "Response body: $BODY_RESP"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "‚úÖ Successfully processed pipeline: $PIPELINE_NAME"
            else
              echo "‚ùå Failed to process pipeline: $PIPELINE_NAME"
              echo "Full response was:"
              echo "$BODY_RESP"
              exit 1
            fi
          done
