name: Deploy Fabric Pipelines

on:
  push:
    branches:
      - main
    paths:
      - 'deploy/pipeline/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Microsoft Fabric CLI
        run: pip install ms-fabric-cli

      - name: Show fab CLI help (for debugging)
        run: |
          echo "=== fab --help output ==="
          fab --help

      - name: Show fab import help (for debugging)
        run: |
          echo "=== fab import --help output ==="
          fab import --help || echo "fab import command not available"

      - name: Get Azure AD access token for Fabric CLI
        id: get_token
        run: |
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ secrets.TENANT_ID }}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
            echo "❌ Failed to get access token"
            echo "$RESPONSE"
            exit 1
          fi
          echo "✅ Access token retrieved"
          echo "FABRIC_ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Get Fabric workspace path from workspace ID
        id: get_workspace_path
        shell: bash
        env:
          FABRIC_ACCESS_TOKEN: ${{ env.FABRIC_ACCESS_TOKEN }}
          FABRIC_WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}
        run: |
          echo "Getting workspace metadata for ID: $FABRIC_WORKSPACE_ID"

          RESPONSE=$(curl -s -H "Authorization: Bearer $FABRIC_ACCESS_TOKEN" \
            "https://api.fabric.microsoft.com/workspaces/$FABRIC_WORKSPACE_ID")

          # Adjust '.path' or '.workspacePath' based on actual API response structure
          WORKSPACE_PATH=$(echo "$RESPONSE" | jq -r '.path // .workspacePath // empty')

          if [[ -z "$WORKSPACE_PATH" ]]; then
            echo "❌ Failed to get workspace path from API response:"
            echo "$RESPONSE"
            exit 1
          fi

          echo "✅ Workspace path found: $WORKSPACE_PATH"
          echo "WORKSPACE_PATH=$WORKSPACE_PATH" >> $GITHUB_ENV

      - name: Login to Fabric CLI with access token
        shell: bash
        env:
          FABRIC_ACCESS_TOKEN: ${{ env.FABRIC_ACCESS_TOKEN }}
        run: |
          echo "$FABRIC_ACCESS_TOKEN" | fab auth login --access-token --stdin

      - name: Deploy pipelines
        shell: bash
        env:
          WORKSPACE_PATH: ${{ env.WORKSPACE_PATH }}
        run: |
          for pipeline_dir in deploy/pipeline/*; do
            if [[ -d "$pipeline_dir" ]]; then
              pipeline_name=$(basename "$pipeline_dir")

              manifest_file="$pipeline_dir/manifest.json"
              pipeline_file="$pipeline_dir/${pipeline_name}.json"

              if [[ -f "$manifest_file" && -f "$pipeline_file" ]]; then
                echo "Deploying manifest.json for $pipeline_name"
                fab import "$WORKSPACE_PATH/${pipeline_name}" -i "$manifest_file" -f

                echo "Deploying ${pipeline_name}.json for $pipeline_name"
                fab import "$WORKSPACE_PATH/${pipeline_name}" -i "$pipeline_file" -f
              else
                echo "Skipping $pipeline_name: missing required JSON files."
              fi
            fi
          done
