- name: Import pipelines from JSON folders (create if not exist)
  env:
    TOKEN: ${{ env.ACCESS_TOKEN }}
    WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
  run: |
    set -euo pipefail

    API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

    echo "üîé Finding pipeline folders..."
    PIPELINE_FOLDERS=$(find deploy/pipeline -mindepth 1 -maxdepth 1 -type d)

    if [ -z "$PIPELINE_FOLDERS" ]; then
      echo "No pipeline folders found."
      exit 0
    fi

    for PIPELINE_FOLDER in $PIPELINE_FOLDERS; do
      PIPELINE_NAME=$(basename "$PIPELINE_FOLDER")

      MANIFEST_FILE="$PIPELINE_FOLDER/manifest.json"
      PIPELINE_JSON_FILE="$PIPELINE_FOLDER/${PIPELINE_NAME}.json"

      echo "üì¶ Processing pipeline: $PIPELINE_NAME"

      # Validate presence of required files
      if [ ! -f "$MANIFEST_FILE" ]; then
        echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - manifest.json not found"
        continue
      fi

      if [ ! -f "$PIPELINE_JSON_FILE" ]; then
        echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - ${PIPELINE_NAME}.json not found"
        continue
      fi

      echo "üîé Checking if pipeline $PIPELINE_NAME already exists..."

      EXISTING_ITEM_ID=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
        jq -r --arg dn "$PIPELINE_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n 1)

      if [ -n "$EXISTING_ITEM_ID" ]; then
        echo "‚ö†Ô∏è Pipeline '$PIPELINE_NAME' already exists (ID: $EXISTING_ITEM_ID). Skipping creation."
        continue
      fi

      echo "üìÑ Reading and processing JSON files..."

      PIPELINE_JSON_CONTENT=$(cat "$PIPELINE_JSON_FILE")

      # Extract pipeline resource inside ARM template
      PIPELINE_RESOURCE=$(echo "$PIPELINE_JSON_CONTENT" | jq '.resources[0]')

      if [ "$PIPELINE_RESOURCE" == "null" ] || [ -z "$PIPELINE_RESOURCE" ]; then
        echo "‚ùå No pipeline resource found inside $PIPELINE_JSON_FILE. Skipping."
        continue
      fi

      ACTIVITIES_COUNT=$(echo "$PIPELINE_RESOURCE" | jq '.properties.activities | length // 0')

      if [ "$ACTIVITIES_COUNT" -eq 0 ]; then
        echo "‚ùå No activities found in pipeline resource inside $PIPELINE_JSON_FILE. Skipping."
        continue
      fi

      echo "üìÑ Encoding manifest.json and pipeline resource..."

      # Read manifest.json as compact JSON
      MANIFEST_CONTENT=$(jq -c '.' "$MANIFEST_FILE")

      # Build the combined payload with manifest and pipeline definition
      FULL_PAYLOAD=$(jq -n \
        --arg dn "$PIPELINE_NAME" \
        --argjson manifest "$MANIFEST_CONTENT" \
        --argjson def "$PIPELINE_RESOURCE" \
        '{
          displayName: $dn,
          type: "Pipeline",
          createItemRequest: {
            manifest: $manifest,
            definition: $def
          }
        }')

      echo "üß© Payload to API:"
      echo "$FULL_PAYLOAD" | jq .

      echo "üÜï Creating new pipeline $PIPELINE_NAME..."

      RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
        -H "Authorization: Bearer $TOKEN" \
        -H "Content-Type: application/json" \
        --data "$FULL_PAYLOAD" \
        "$API_BASE")

      HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
      BODY_RESP=$(echo "$RESPONSE" | sed '$d')

      echo "Response code: $HTTP_CODE"
      echo "Response body: $BODY_RESP"

      if [[ "$HTTP_CODE" =~ ^2 ]]; then
        echo "‚úÖ Successfully created pipeline: $PIPELINE_NAME"
      else
        echo "‚ùå Failed to create pipeline: $PIPELINE_NAME"
        exit 1
      fi
    done
