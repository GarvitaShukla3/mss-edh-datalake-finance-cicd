name: Import Pipelines with Full Properties at Creation

on:
  workflow_dispatch:
  push:
    paths:
      - 'deploy/pipeline/**/*.json'

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  import-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Microsoft Fabric Access Token
        id: get_token
        run: |
          set -euo pipefail
          echo "üîê Requesting access token..."
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")
          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
            echo "‚ùå Failed to retrieve access token. Response was:"
            echo "$RESPONSE"
            exit 1
          fi
          echo "‚úÖ Access token retrieved."
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Create pipelines with full properties at once
        env:
          TOKEN: ${{ env.ACCESS_TOKEN }}
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
        run: |
          set -euo pipefail

          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"
          echo "üîé Looking for pipeline folders..."
          PIPELINE_FOLDERS=$(find deploy/pipeline -mindepth 1 -maxdepth 1 -type d || true)

          if [ -z "$PIPELINE_FOLDERS" ]; then
            echo "‚ÑπÔ∏è No pipeline folders found; exiting."
            exit 0
          fi

          for PIPELINE_FOLDER in $PIPELINE_FOLDERS; do
            PIPELINE_NAME=$(basename "$PIPELINE_FOLDER")
            MANIFEST_FILE="$PIPELINE_FOLDER/manifest.json"
            PIPELINE_JSON_FILE="$PIPELINE_FOLDER/${PIPELINE_NAME}.json"

            echo "üì¶ Processing pipeline: $PIPELINE_NAME"

            if [ ! -f "$MANIFEST_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME ‚Äî manifest.json not found"
              continue
            fi

            if [ ! -f "$PIPELINE_JSON_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME ‚Äî ${PIPELINE_NAME}.json not found"
              continue
            fi

            # Read manifest and full pipeline JSON (which includes full properties)
            MANIFEST_CONTENT=$(jq '.' "$MANIFEST_FILE")
            FULL_PIPELINE_JSON=$(jq '.' "$PIPELINE_JSON_FILE")

            # Extract pipeline resource (type == "pipelines")
            PIPELINE_RESOURCE=$(echo "$FULL_PIPELINE_JSON" | jq '.resources[] | select(.type == "pipelines")')
            if [ -z "$PIPELINE_RESOURCE" ] || [ "$PIPELINE_RESOURCE" == "null" ]; then
              echo "‚ùå No pipeline resource of type 'pipelines' found in $PIPELINE_JSON_FILE. Skipping."
              continue
            fi

            # Extract full properties object
            FULL_PROPERTIES=$(echo "$PIPELINE_RESOURCE" | jq '.properties')
            if [ "$FULL_PROPERTIES" == "null" ]; then
              echo "‚ùå No properties found in pipeline resource. Skipping."
              continue
            fi

            # Check if pipeline already exists (by displayName)
            echo "üîç Checking if pipeline '$PIPELINE_NAME' exists..."
            EXISTS=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
              jq -r --arg dn "$PIPELINE_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n1)

            if [ -n "$EXISTS" ]; then
              echo "‚ö†Ô∏è Pipeline $PIPELINE_NAME already exists (ID: $EXISTS). Skipping creation."
              continue
            fi

            # Compose full create payload including full properties inside definition
            CREATE_PAYLOAD=$(jq -n \
              --arg dn "$PIPELINE_NAME" \
              --argjson manifest "$MANIFEST_CONTENT" \
              --argjson properties "$FULL_PROPERTIES" \
              '{
                displayName: $dn,
                type: "Pipeline",
                createItemRequest: {
                  manifest: $manifest,
                  definition: { properties: $properties }
                }
              }')

            echo "üöÄ Creating pipeline with full properties: $PIPELINE_NAME"
            # Optional: echo "$CREATE_PAYLOAD" | jq .

            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data "$CREATE_PAYLOAD" \
              "$API_BASE")

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            echo "Response HTTP code: $HTTP_CODE"
            echo "Response body: $BODY"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "‚úÖ Successfully created pipeline: $PIPELINE_NAME"
            else
              echo "‚ùå Failed to create pipeline: $PIPELINE_NAME"
              exit 1
            fi
          done
