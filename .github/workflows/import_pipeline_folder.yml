name: Deploy Fabric Pipelines

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Install Fabric CLI
      run: |
        # Example install command (replace with actual Fabric CLI install steps)
        curl -sSL https://fabric-cli-url/install.sh | bash

    - name: Get Access Token
      id: get_token
      run: |
        ACCESS_TOKEN=$(curl -X POST \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.CLIENT_ID }}&scope=https%3A%2F%2Ffabric.azure.com%2F.default&client_secret=${{ secrets.CLIENT_SECRET }}&grant_type=client_credentials" \
          "https://login.microsoftonline.com/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" | jq -r '.access_token')

        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

    - name: Authenticate Fabric CLI
      run: |
        # Example fabric CLI login with token, replace if necessary
        fabric auth login --access-token $ACCESS_TOKEN --workspace ${{ secrets.FABRIC_WORKSPACE_ID }}

    - name: Deploy pipelines
      run: |
        # Loop through each pipeline folder in deploy/pipeline
        for pipeline_dir in deploy/pipeline/*/; do
          echo "Deploying pipeline in $pipeline_dir"
          pipeline_name=$(basename "$pipeline_dir")
          manifest_path="$pipeline_dir/manifest.json"
          pipeline_json_path="$pipeline_dir/${pipeline_name}.json"

          # Check files exist
          if [[ ! -f "$manifest_path" ]]; then
            echo "Manifest not found: $manifest_path"
            exit 1
          fi
          if [[ ! -f "$pipeline_json_path" ]]; then
            echo "Pipeline json not found: $pipeline_json_path"
            exit 1
          fi

          # Deploy using Fabric CLI
          fabric pipeline deploy --workspace ${{ secrets.WORKSPACE_ID }} --manifest "$manifest_path" --pipeline "$pipeline_json_path"
        done
