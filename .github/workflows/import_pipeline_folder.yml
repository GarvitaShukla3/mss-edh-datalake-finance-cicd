name: Import Microsoft Fabric Pipelines

on:
  workflow_dispatch:

env:
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  FABRIC_WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  import-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Azure AD access token
        id: get_token
        run: |
          set -euo pipefail

          echo "üîê Requesting access token..."
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://analysis.windows.net/powerbi/api/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
            echo "‚ùå Failed to retrieve access token."
            echo "$RESPONSE"
            exit 1
          fi

          echo "‚úÖ Access token retrieved."
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Import all pipelines from deploy/pipeline
        env:
          TOKEN: ${{ env.ACCESS_TOKEN }}
          WORKSPACE_ID: ${{ env.FABRIC_WORKSPACE_ID }}
        run: |
          set -euo pipefail

          BASE_DIR="deploy/pipeline"

          if [ ! -d "$BASE_DIR" ]; then
            echo "‚ùå Pipeline directory '$BASE_DIR' not found."
            exit 1
          fi

          # Iterate over all pipeline folders
          for PIPELINE_FOLDER in "$BASE_DIR"/*/; do
            PIPELINE_FOLDER=${PIPELINE_FOLDER%/} # remove trailing slash
            PIPELINE_NAME=$(basename "$PIPELINE_FOLDER")
            MANIFEST_FILE="$PIPELINE_FOLDER/manifest.json"
            PIPELINE_JSON_FILE="$PIPELINE_FOLDER/${PIPELINE_NAME}.json"

            echo "üì¶ Processing pipeline folder: $PIPELINE_NAME"

            if [ ! -f "$MANIFEST_FILE" ]; then
              echo "‚ö†Ô∏è manifest.json not found in $PIPELINE_FOLDER, skipping."
              continue
            fi

            if [ ! -f "$PIPELINE_JSON_FILE" ]; then
              echo "‚ö†Ô∏è Pipeline JSON file $PIPELINE_NAME.json not found in $PIPELINE_FOLDER, skipping."
              continue
            fi

            MANIFEST=$(jq '.' "$MANIFEST_FILE")
            PIPELINE_DATA=$(jq '.' "$PIPELINE_JSON_FILE")

            PIPELINE_RESOURCE=$(echo "$PIPELINE_DATA" | jq '.resources[] | select(.type == "pipelines")')
            if [ -z "$PIPELINE_RESOURCE" ] || [ "$PIPELINE_RESOURCE" == "null" ]; then
              echo "‚ùå No pipeline resource of type 'pipelines' found in $PIPELINE_JSON_FILE, skipping."
              continue
            fi

            PROPERTIES=$(echo "$PIPELINE_RESOURCE" | jq '.properties')

            DISPLAY_NAME=$(echo "$MANIFEST" | jq -r '.displayName // "'$PIPELINE_NAME'"')

            echo "üöÄ Importing pipeline: $DISPLAY_NAME"

            API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

            EXISTS=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
              jq -r --arg dn "$DISPLAY_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n1)

            if [ -n "$EXISTS" ]; then
              echo "‚ö†Ô∏è Pipeline '$DISPLAY_NAME' already exists (ID: $EXISTS). Skipping creation."
              continue
            fi

            CREATE_PAYLOAD=$(jq -n \
              --arg dn "$DISPLAY_NAME" \
              --argjson manifest "$MANIFEST" \
              --argjson properties "$PROPERTIES" \
              '{
                displayName: $dn,
                type: "Pipeline",
                manifest: $manifest,
                createItemRequest:{
                  definition: { properties: $properties }
                }
              }')

            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data "$CREATE_PAYLOAD" \
              "$API_BASE")

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            echo "Response HTTP code: $HTTP_CODE"
            echo "Response body: $BODY"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "‚úÖ Pipeline '$DISPLAY_NAME' imported successfully."
            else
              echo "‚ùå Failed to import pipeline '$DISPLAY_NAME'."
              exit 1
            fi
          done
