name: Deploy Fabric Pipelines

on:
  push:
    branches:
      - main
    paths:
      - 'deploy/pipeline/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Microsoft Fabric CLI
        run: pip install ms-fabric-cli

      - name: Show fab CLI help (for debugging)
        run: |
          echo "=== fab --help output ==="
          fab --help || echo "fab command failed"

      - name: Show fab import help (for debugging)
        run: |
          echo "=== fab import --help output ==="
          fab import --help || echo "fab import command not available"

      - name: Get Azure AD access token for Fabric CLI
        id: get_token
        run: |
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ secrets.TENANT_ID }}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
            echo "❌ Failed to get access token"
            echo "$RESPONSE"
            exit 1
          fi
          echo "✅ Access token retrieved"
          echo "FABRIC_ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Get Fabric workspace items (debug to find path)
        id: get_workspace_items
        shell: bash
        env:
          FABRIC_ACCESS_TOKEN: ${{ env.FABRIC_ACCESS_TOKEN }}
          WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}
        run: |
          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          echo "Getting workspace items from $API_BASE"

          RESPONSE=$(curl -s -H "Authorization: Bearer $FABRIC_ACCESS_TOKEN" "$API_BASE")

          echo "API response:"
          echo "$RESPONSE"

          # Validate JSON
          echo "$RESPONSE" | jq . > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "❌ Response is not valid JSON. Aborting."
            exit 1
          fi

          echo "Workspace items summary:"
          echo "$RESPONSE" | jq '.value[] | {id: .id, name: .displayName, type: .type}'

          # You can set WORKSPACE_PATH here manually or extract it dynamically if needed
          echo "WORKSPACE_PATH=/Prod-Fabric-workspace" >> $GITHUB_ENV

      - name: Deploy pipelines
        shell: bash
        env:
          FABRIC_ACCESS_TOKEN: ${{ env.FABRIC_ACCESS_TOKEN }}
          WORKSPACE_PATH: ${{ env.WORKSPACE_PATH }}
        run: |
          export FABRIC_ACCESS_TOKEN
          export FABRIC_AUTH_TOKEN=$FABRIC_ACCESS_TOKEN

          for pipeline_dir in deploy/pipeline/*; do
            if [ -d "$pipeline_dir" ]; then
              pipeline_name=$(basename "$pipeline_dir")

              manifest_file="$pipeline_dir/manifest.json"
              pipeline_file="$pipeline_dir/${pipeline_name}.json"

              if [[ -f "$manifest_file" && -f "$pipeline_file" ]]; then
                echo "Deploying manifest.json for $pipeline_name"
                fab import "https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/${pipeline_name}" -i "$manifest_file" -f


                echo "Deploying ${pipeline_name}.json for $pipeline_name"
                fab import "https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/${pipeline_name}" -i "$pipeline_file" -f

              else
                echo "Skipping $pipeline_name: missing required JSON files."
              fi
            fi
          done

      - name: Show final fab config (for debugging)
        run: fab config list || echo "fab config list command failed"
