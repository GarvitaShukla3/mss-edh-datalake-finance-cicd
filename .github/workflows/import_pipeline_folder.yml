name: Import Pipelines 

on:
  workflow_dispatch:
  push:
    paths:
      - 'deploy/pipeline/**/*.json'

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  import-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Microsoft Fabric Access Token
        id: get_token
        run: |
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
            echo "‚ùå Failed to retrieve access token."
            exit 1
          fi

          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Import pipelines from JSON folders
        env:
          TOKEN: ${{ env.ACCESS_TOKEN }}
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
        run: |
          set -euo pipefail

          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          PIPELINE_FOLDERS=$(find deploy/pipeline -mindepth 1 -maxdepth 1 -type d)

          if [ -z "$PIPELINE_FOLDERS" ]; then
            echo "No pipeline folders found."
            exit 0
          fi

          for PIPELINE_FOLDER in $PIPELINE_FOLDERS; do
            PIPELINE_NAME=$(basename "$PIPELINE_FOLDER")

            MANIFEST_FILE="$PIPELINE_FOLDER/manifest.json"
            PIPELINE_JSON_FILE="$PIPELINE_FOLDER/${PIPELINE_NAME}.json"

            if [ ! -f "$MANIFEST_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - manifest.json not found"
              continue
            fi

            if [ ! -f "$PIPELINE_JSON_FILE" ]; then
              echo "‚ö†Ô∏è Skipping $PIPELINE_NAME - ${PIPELINE_NAME}.json not found"
              continue
            fi

            echo "üì¶ Processing pipeline: $PIPELINE_NAME"

            # Load manifest base definition
            BASE_DEFINITION=$(jq -c '.' "$MANIFEST_FILE")

            # Load pipeline resource properties with activities
            PIPELINE_RESOURCE=$(jq -c '.resources[0]' "$PIPELINE_JSON_FILE")
            if [ -z "$PIPELINE_RESOURCE" ] || [ "$PIPELINE_RESOURCE" == "null" ]; then
              echo "‚ùå Invalid pipeline resource in $PIPELINE_JSON_FILE"
              exit 1
            fi

            PIPELINE_PROPERTIES=$(echo "$PIPELINE_RESOURCE" | jq '.properties')

            ACTIVITIES=$(echo "$PIPELINE_PROPERTIES" | jq '.activities')
            if [ "$ACTIVITIES" == "null" ] || [ "$(echo "$ACTIVITIES" | jq 'length')" -eq 0 ]; then
              echo "‚ùå No activities found in $PIPELINE_JSON_FILE - skipping."
              continue
            fi

            LAST_MODIFIED=$(echo "$PIPELINE_PROPERTIES" | jq -r '.lastModifiedByObjectId // empty')
            LAST_PUBLISH=$(echo "$PIPELINE_PROPERTIES" | jq -r '.lastPublishTime // empty')

            # Create clean definition JSON
            CLEAN_DEFINITION=$(jq -n \
              --argjson activities "$ACTIVITIES" \
              --arg lastModified "$LAST_MODIFIED" \
              --arg lastPublish "$LAST_PUBLISH" \
              '{
                activities: $activities
              }
              | if $lastModified != "" then . + { lastModifiedByObjectId: $lastModified } else . end
              | if $lastPublish != "" then . + { lastPublishTime: $lastPublish } else . end
              ')

            # Build full payload
            FULL_PAYLOAD=$(jq -n \
              --arg dn "$PIPELINE_NAME" \
              --argjson def "$CLEAN_DEFINITION" \
              '{
                displayName: $dn,
                type: "Pipeline",
                createItemRequest: {
                  definition: $def
                }
              }')

            echo "üß™ Payload to API:"
            echo "$FULL_PAYLOAD" | jq .

            # Check existing pipeline ID
            EXISTING_ITEM_ID=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
              jq -r --arg dn "$PIPELINE_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n 1)

            if [ -n "$EXISTING_ITEM_ID" ]; then
              echo "üîÑ Updating existing pipeline $PIPELINE_NAME (ID: $EXISTING_ITEM_ID)..."

              UPDATE_PAYLOAD=$(jq -n --argjson def "$CLEAN_DEFINITION" '{ definition: $def }')

              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$UPDATE_PAYLOAD" \
                "$API_BASE/$EXISTING_ITEM_ID/updateDefinition")
            else
              echo "üÜï Creating new pipeline $PIPELINE_NAME..."

              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$FULL_PAYLOAD" \
                "$API_BASE")
            fi

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY_RESP=$(echo "$RESPONSE" | sed '$d')

            echo "Response code: $HTTP_CODE"
            echo "Response body: $BODY_RESP"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "‚úÖ Successfully processed pipeline: $PIPELINE_NAME"
            else
              echo "‚ùå Failed to process pipeline: $PIPELINE_NAME"
              exit 1
            fi

          done
