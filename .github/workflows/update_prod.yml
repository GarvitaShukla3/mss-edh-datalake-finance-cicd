name: Update to Microsoft Fabric Workspace

on:
  push:
    branches:
      - main
    paths:
      - deploy/notebook/**/*.ipynb

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: üîê Get Microsoft Fabric Access Token
        id: get_token
        run: |
          echo "üîê Requesting Fabric access token..."
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")
          echo "üîÅ Raw response:"
          echo "$RESPONSE"
          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ "$ACCESS_TOKEN" == "null" || -z "$ACCESS_TOKEN" ]]; then
            echo "‚ùå Failed to retrieve access token."
            exit 1
          fi
          echo "‚úÖ Token retrieved successfully."
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: üöÄ Sync changed notebooks
        env:
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
          TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -euxo pipefail
          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"
          NOTEBOOK_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/notebooks"

          # Get only changed files in this push
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          echo "Changed files in this push:"
          echo "$CHANGED"
          
          # Filter to only .ipynb under deploy/notebook
          FILES=$(echo "$CHANGED" | grep '^deploy/notebook/.*\.ipynb$' || true)
          echo "Notebook files changed: $FILES"
          
          if [ -z "$FILES" ]; then
            echo "No notebook files changed‚Äînothing to do."
            exit 0
          fi
          
          # Optionally, fetch existing items list (display names + ids)
          EXISTING_JSON=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE")
          
          for FILE in $FILES; do
            echo "Processing $FILE..."
            DISPLAY_NAME=$(basename "$FILE" .ipynb)
            FILE_NAME="${DISPLAY_NAME}.ipynb"
            CONTENT_BASE64=$(base64 -w 0 "$FILE")

            # find existing item id if exists
            EXISTING_ID=$(echo "$EXISTING_JSON" | jq -r --arg dn "$DISPLAY_NAME" '.items[] | select(.displayName == $dn) | .id // empty')
            
            if [ -z "$EXISTING_ID" ]; then
              echo "Notebook '$DISPLAY_NAME' not found in Fabric ‚Äî creating..."
              PAYLOAD=$(jq -n \
                --arg dn "$DISPLAY_NAME" \
                --arg fn "$FILE_NAME" \
                --arg payload "$CONTENT_BASE64" \
                '{
                  displayName: $dn,
                  type: "Notebook",
                  definition: {
                    format: "ipynb",
                    parts: [
                      {
                        path: $fn,
                        payload: $payload,
                        payloadType: "InlineBase64"
                      }
                    ]
                  }
                }')
              RESP=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$PAYLOAD" \
                "$API_BASE")
              HTTP_CODE=$(echo "$RESP" | tail -n1)
              BODY=$(echo "$RESP" | sed '$d')
              echo "HTTP status: $HTTP_CODE, Body: $BODY"
              if [[ "$HTTP_CODE" =~ ^2 ]]; then
                echo "‚úÖ Created notebook: $DISPLAY_NAME"
              else
                echo "‚ùå Failed to create: $DISPLAY_NAME"
                exit 1
              fi

            else
              echo "Notebook '$DISPLAY_NAME' exists (ID = $EXISTING_ID). Checking if update needed..."
              
              # get existing notebook definition content
              DEF_RESP=$(curl -s -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data '{"format":"ipynb"}' \
                "$API_BASE/$EXISTING_ID/GetDefinition?format=ipynb")
              # extract existing payload
              EXISTING_PAYLOAD=$(echo "$DEF_RESP" | jq -r '.definition.parts[0].payload // empty')
              
              if [ "$EXISTING_PAYLOAD" = "$CONTENT_BASE64" ]; then
                echo "No changes detected in '$DISPLAY_NAME'. Skipping update."
              else
                echo "Changes detected in '$DISPLAY_NAME'. Updating..."
                UPDATE_PAYLOAD=$(jq -n \
                  --arg fn "$FILE_NAME" \
                  --arg payload "$CONTENT_BASE64" \
                  '{
                    definition: {
                      format: "ipynb",
                      parts: [
                        {
                          path: $fn,
                          payload: $payload,
                          payloadType: "InlineBase64"
                        }
                      ]
                    }
                  }')
                # call updateDefinition API
                RESP2=$(curl -s -w "\n%{http_code}" -X POST \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "$UPDATE_PAYLOAD" \
                  "$NOTEBOOK_BASE/$EXISTING_ID/updateDefinition?updateMetadata=true")
                HTTP2=$(echo "$RESP2" | tail -n1)
                BODY2=$(echo "$RESP2" | sed '$d')
                echo "HTTP status: $HTTP2, Body: $BODY2"
                if [[ "$HTTP2" =~ ^2 ]]; then
                  echo "‚úÖ Updated notebook: $DISPLAY_NAME"
                else
                  echo "‚ùå Failed to update: $DISPLAY_NAME"
                  exit 1
                fi
              fi
            fi

          done
