name: Update to MS Fabric

on:
  push:
    branches:
      - main
    paths:
      - deploy/notebook/**/*.ipynb

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important to fetch full history for git commands if needed

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: üîê Get Microsoft Fabric Access Token
        id: get_token
        run: |
          echo "üîê Requesting Fabric access token..."
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")
          echo "üîÅ Raw response:"
          echo "$RESPONSE"
          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ "$ACCESS_TOKEN" == "null" || -z "$ACCESS_TOKEN" ]]; then
            echo "‚ùå Failed to retrieve access token."
            exit 1
          fi
          echo "‚úÖ Token retrieved successfully."
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: üöÄ Sync notebooks to Microsoft Fabric workspace
        env:
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
          TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -euo pipefail

          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"
          FILES=$(git ls-files | grep '^deploy/notebook/.*\.ipynb$' || true)

          echo "Files to process: $FILES"

          if [ -z "$FILES" ]; then
            echo "No notebook files detected to upload, exiting."
            exit 0
          fi

          for FILE in $FILES; do
            echo "üìò Processing $FILE..."
            DISPLAY_NAME=$(basename "$FILE" .ipynb)
            FILE_NAME="${DISPLAY_NAME}.ipynb"
            CONTENT_BASE64=$(base64 -w 0 "$FILE")

            # URL-encode filter query for safety
            FILTER_QUERY=$(printf "displayName eq '%s' and type eq 'Notebook'" "$DISPLAY_NAME" | jq -sRr @uri)

            echo "üîç Checking if notebook '$DISPLAY_NAME' exists in workspace..."
            RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "$API_BASE?filter=$FILTER_QUERY" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json")

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            echo "HTTP status: $HTTP_CODE"
            echo "Response: $BODY"

            if [ "$HTTP_CODE" != "200" ]; then
              echo "‚ùå Failed to query notebook existence. Exiting."
              exit 1
            fi

            ITEM_ID=$(echo "$BODY" | jq -r '.value[0].id // empty')

            PAYLOAD=$(jq -n \
              --arg dn "$DISPLAY_NAME" \
              --arg fn "$FILE_NAME" \
              --arg payload "$CONTENT_BASE64" \
              '{
                displayName: $dn,
                type: "Notebook",
                definition: {
                  format: "ipynb",
                  parts: [
                    {
                      path: $fn,
                      payload: $payload,
                      payloadType: "InlineBase64"
                    }
                  ]
                }
              }')

            if [ -n "$ITEM_ID" ]; then
              echo "üîÅ Notebook exists. Updating notebook with ID $ITEM_ID..."
              UPD_RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH "$API_BASE/$ITEM_ID" \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$PAYLOAD")

              UPD_HTTP_CODE=$(echo "$UPD_RESPONSE" | tail -n1)
              UPD_BODY=$(echo "$UPD_RESPONSE" | sed '$d')

              echo "Update HTTP status: $UPD_HTTP_CODE"
              echo "Update response: $UPD_BODY"

              if [[ "$UPD_HTTP_CODE" =~ ^2 ]]; then
                echo "‚úÖ Successfully updated $FILE"
              else
                echo "‚ùå Failed to update $FILE"
                exit 1
              fi
            else
              echo "üÜï Notebook does not exist. Creating new notebook..."
              CRT_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$API_BASE" \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$PAYLOAD")

              CRT_HTTP_CODE=$(echo "$CRT_RESPONSE" | tail -n1)
              CRT_BODY=$(echo "$CRT_RESPONSE" | sed '$d')

              echo "Create HTTP status: $CRT_HTTP_CODE"
              echo "Create response: $CRT_BODY"

              if [[ "$CRT_HTTP_CODE" =~ ^2 ]]; then
                echo "‚úÖ Successfully created $FILE"
              else
                echo "‚ùå Failed to create $FILE"
                exit 1
              fi
            fi
          done
