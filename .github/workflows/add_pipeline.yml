name: Sync Pipelines to Microsoft Fabric Workspace

on:
  workflow_dispatch:  # manual trigger
  push:
    branches: [main]  # or change to your deployment branch
    paths:
      - 'deploy/pipeline/**/pipeline.json'

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  sync-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Microsoft Fabric Access Token
        id: get_token
        run: |
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ "$ACCESS_TOKEN" == "null" || -z "$ACCESS_TOKEN" ]]; then
            echo "❌ Failed to retrieve access token."
            exit 1
          fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Sync pipelines to Microsoft Fabric
        env:
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
          TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -e
          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          # Find all pipeline.json files
          PIPELINE_FILES=$(find deploy/pipeline -name pipeline.json)
          if [ -z "$PIPELINE_FILES" ]; then
            echo "No pipeline.json files found."
            exit 0
          fi

          for FILE in $PIPELINE_FILES; do
            echo "Processing: $FILE"

            PIPELINE_DIR=$(dirname "$FILE")
            DISPLAY_NAME=$(basename "$PIPELINE_DIR")
            FILE_NAME="pipeline.json"
            CONTENT_BASE64=$(base64 -w 0 "$FILE")

            # Check if pipeline already exists
            EXISTING_ITEM_ID=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
              jq -r --arg dn "$DISPLAY_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n 1)

            # Payloads
            FULL_PAYLOAD=$(jq -n \
              --arg dn "$DISPLAY_NAME" \
              --arg fn "$FILE_NAME" \
              --arg payload "$CONTENT_BASE64" \
              '{
                displayName: $dn,
                type: "Pipeline",
                definition: {
                  format: "json",
                  parts: [
                    {
                      path: $fn,
                      payload: $payload,
                      payloadType: "InlineBase64"
                    }
                  ]
                }
              }')

            DEFINITION_WRAPPED_PAYLOAD=$(jq -n \
              --arg fn "$FILE_NAME" \
              --arg payload "$CONTENT_BASE64" \
              '{
                definition: {
                  format: "json",
                  parts: [
                    {
                      path: $fn,
                      payload: $payload,
                      payloadType: "InlineBase64"
                    }
                  ]
                }
              }')

            if [ -n "$EXISTING_ITEM_ID" ]; then
              echo "Pipeline exists (ID: $EXISTING_ITEM_ID), updating..."
              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$DEFINITION_WRAPPED_PAYLOAD" \
                "$API_BASE/$EXISTING_ITEM_ID/updateDefinition")
            else
              echo "Pipeline does not exist, creating new..."
              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$FULL_PAYLOAD" \
                "$API_BASE")
            fi

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY_RESP=$(echo "$RESPONSE" | sed '$d')
            echo "HTTP status: $HTTP_CODE"
            echo "Response body: $BODY_RESP"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "✅ Successfully processed: $DISPLAY_NAME"
            else
              echo "❌ Failed to process: $DISPLAY_NAME"
              exit 1
            fi
          done
