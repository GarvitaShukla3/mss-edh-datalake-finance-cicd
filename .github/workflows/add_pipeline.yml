name: Sync Pipelines to Microsoft Fabric Workspace

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'deploy/pipeline/**'

env:
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  WORKSPACE_ID: ${{ secrets.FABRIC_WORKSPACE_ID }}

jobs:
  sync-pipelines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Get Microsoft Fabric Access Token
        id: get_token
        run: |
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${{ env.CLIENT_ID }}" \
            -d "client_secret=${{ env.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            "https://login.microsoftonline.com/${{ env.TENANT_ID }}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          if [[ "$ACCESS_TOKEN" == "null" || -z "$ACCESS_TOKEN" ]]; then
            echo "‚ùå Failed to retrieve access token."
            exit 1
          fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Sync pipelines to Microsoft Fabric
        env:
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
          TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -e
          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          PIPELINE_FOLDERS=$(find deploy/pipeline -mindepth 1 -maxdepth 1 -type d)
          if [ -z "$PIPELINE_FOLDERS" ]; then
            echo "No pipeline folders found."
            exit 0
          fi

          for DIR in $PIPELINE_FOLDERS; do
            PIPELINE_NAME=$(basename "$DIR")
            PIPELINE_FILE="$DIR/$PIPELINE_NAME.json"

            if [ ! -f "$PIPELINE_FILE" ]; then
              echo "‚ùå Skipping $DIR - missing $PIPELINE_NAME.json"
              continue
            fi

            echo "üì¶ Processing pipeline: $PIPELINE_NAME"

            # Prepare compact JSON string of pipeline file for payload
            PAYLOAD_STR=$(jq -c '.' "$PIPELINE_FILE")

            # Prepare full payload with createItemRequest wrapper for creation
            FULL_PAYLOAD=$(jq -n \
              --arg dn "$PIPELINE_NAME" \
              --arg fn "$PIPELINE_NAME.json" \
              --arg payload_str "$PAYLOAD_STR" \
              '{
                createItemRequest: {
                  displayName: $dn,
                  Type: "Pipeline",
                  definition: {
                    format: "json",
                    parts: [
                      {
                        path: $fn,
                        payload: $payload_str,
                        payloadType: "Inline"
                      }
                    ]
                  }
                }
              }')

            # Prepare update payload (only definition)
            DEFINITION_ONLY_PAYLOAD=$(jq -n \
              --arg fn "$PIPELINE_NAME.json" \
              --arg payload_str "$PAYLOAD_STR" \
              '{
                definition: {
                  format: "json",
                  parts: [
                    {
                      path: $fn,
                      payload: $payload_str,
                      payloadType: "Inline"
                    }
                  ]
                }
              }')

            # Check if pipeline already exists
            EXISTING_ITEM_ID=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
              jq -r --arg dn "$PIPELINE_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n 1)

            if [ -n "$EXISTING_ITEM_ID" ]; then
              echo "üîÑ Updating existing pipeline $PIPELINE_NAME (ID: $EXISTING_ITEM_ID)..."
              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$DEFINITION_ONLY_PAYLOAD" \
                "$API_BASE/$EXISTING_ITEM_ID/updateDefinition")
            else
              echo "üÜï Creating new pipeline $PIPELINE_NAME..."
              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$FULL_PAYLOAD" \
                "$API_BASE")
            fi

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY_RESP=$(echo "$RESPONSE" | sed '$d')
            echo "Response code: $HTTP_CODE"
            echo "Response body: $BODY_RESP"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "‚úÖ Successfully processed: $PIPELINE_NAME"
            else
              echo "‚ùå Failed to process: $PIPELINE_NAME"
              exit 1
            fi
          done
