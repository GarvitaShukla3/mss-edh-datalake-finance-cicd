      - name: Sync pipelines to Microsoft Fabric
        env:
          WORKSPACE_ID: ${{ env.WORKSPACE_ID }}
          TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -e
          API_BASE="https://api.fabric.microsoft.com/v1/workspaces/${WORKSPACE_ID}/items"

          PIPELINE_FOLDERS=$(find deploy/pipeline -mindepth 1 -maxdepth 1 -type d)
          if [ -z "$PIPELINE_FOLDERS" ]; then
            echo "No pipeline folders found."
            exit 0
          fi

          for DIR in $PIPELINE_FOLDERS; do
            PIPELINE_NAME=$(basename "$DIR")
            PIPELINE_FILE="$DIR/$PIPELINE_NAME.json"

            if [ ! -f "$PIPELINE_FILE" ]; then
              echo "‚ùå Skipping $DIR - missing $PIPELINE_NAME.json"
              continue
            fi

            echo "üì¶ Processing pipeline: $PIPELINE_NAME"

            # Read pipeline JSON content
            PIPELINE_JSON=$(jq '.' "$PIPELINE_FILE")

            # Prepare full payload with wrapped parts array
            FULL_PAYLOAD=$(jq -n --arg dn "$PIPELINE_NAME" --arg fn "$PIPELINE_NAME.json" --argjson payload "$PIPELINE_JSON" '{
              displayName: $dn,
              type: "Pipeline",
              definition: {
                format: "json",
                parts: [
                  {
                    path: $fn,
                    payload: $payload,
                    payloadType: "Inline"
                  }
                ]
              }
            }')

            # Prepare update payload (only definition)
            DEFINITION_ONLY_PAYLOAD=$(jq -n --arg fn "$PIPELINE_NAME.json" --argjson payload "$PIPELINE_JSON" '{
              definition: {
                format: "json",
                parts: [
                  {
                    path: $fn,
                    payload: $payload,
                    payloadType: "Inline"
                  }
                ]
              }
            }')

            # Check if pipeline already exists
            EXISTING_ITEM_ID=$(curl -s -H "Authorization: Bearer $TOKEN" "$API_BASE" | \
              jq -r --arg dn "$PIPELINE_NAME" '.value[] | select(.displayName == $dn and .type == "Pipeline") | .id' | head -n 1)

            if [ -n "$EXISTING_ITEM_ID" ]; then
              echo "üîÑ Updating existing pipeline $PIPELINE_NAME (ID: $EXISTING_ITEM_ID)..."
              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$DEFINITION_ONLY_PAYLOAD" \
                "$API_BASE/$EXISTING_ITEM_ID/updateDefinition")
            else
              echo "üÜï Creating new pipeline $PIPELINE_NAME..."
              RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -H "Content-Type: application/json" \
                --data "$FULL_PAYLOAD" \
                "$API_BASE")
            fi

            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY_RESP=$(echo "$RESPONSE" | sed '$d')
            echo "Response code: $HTTP_CODE"
            echo "Response body: $BODY_RESP"

            if [[ "$HTTP_CODE" =~ ^2 ]]; then
              echo "‚úÖ Successfully processed: $PIPELINE_NAME"
            else
              echo "‚ùå Failed to process: $PIPELINE_NAME"
              exit 1
            fi
          done
